4th Sep 2025
============

-> Python : 35-40 Days (Common for DA/DS/AI or FullStack or Cloud & DevOps)

    -> DA/DS/AI : pandas, numpy, matplotlib etc 
    -> FullStack : Django
    -> Cloud & DevOps : Scripting (OS,SYS,Cloud Modules etc)

-> Python : Python is a high-level, general-purpose programming language. 
            Its design philosophy emphasizes code readability 
            with the use of significant indentation. 
            Python is dynamically type-checked and garbage-collected.

-> Programming Language (Python) : Communicate with Machines

    -> Why shouldn't i Communicate with Machines using English ?

        -> Machines Use Binary Language (01110100101's) 

            -> Binary Language == Machine Language = Low Level Language

            -> 01110000 01111001 01110100 01101000 01101111 01101110 

                -> python

            -> High Level Language 

        Language (English) : Communicate with humans who wants to exchange ideas / data 
        in terms of english
    
    -> General-purpose programming languages

        -> used to manage workloads in different domains 

            -> python can be used for following 
                (bcz of Supporting Multiple Programming Paradigms )

                -> Desktop Apps
                -> Web Apps
                -> API Dev
                -> Data Related Domain
                -> Scripting 
                -> etc 

    -> Domain Specific programming languages

        -> Structured Query Language is a domain-specific language used to manage data, especially in Database Systems

    -> Programming Paradigms 

        -> Paradigm : structure / way to do things

        -> Imperative : HOW TO DO (Style) - Full stack / DevOps / Cloud

        -> Declarative : WHAT TO DO (Style) Functional - DA / DS / AI

        -> Python supports Multiple Programming Paradigms 


    -> Add Two Numbers In Java

    class Main {
        public static void main(String[] args) {          
            int first = 10;
            int second = 20;
            // add two numbers
            int sum = first + second;
            System.out.println(first + " + " + second + " = "  + sum);
        }
    }

    -> Add Two Numbers In Python
        first = 10
        second = 20
        sum = first + second
        print(sum)
    
    -> Interpreted (Slow In Performance) - Python

    -> Compiled (Fast In Performance) - Java

5th Sep 2025
============

-> Hardware Spec:

    -> i5 / i3 Processor
    -> 8 GB RAM 
    -> 500 GB HDD

-> Softwares:

    -> Setup Python (python.org)
    
    -> IDE : Integrated Development Environment (Visual Studio Code)
        -> For Writing Code
        
    -> Version Control System : Helps You Keep Track Of Code 

        -> Project : Repository (Holds Project Code + Tracking History) (Collection Of Commits)

        -> Changes : Commits 

        -> Systems We Use

            -> Git : Client Software installed in developer laptop, to start tracking code

            -> GitHub : Platform Which Enables To Store Source Code (github.com)

        -> Workflow

            -> As a developer, you'll create an account on GitHub (github.com)

            -> On Github We Create Repository (Remote Repository) - Unique URL

            -> Clone (Remote Repository) Using - Unique URL 

                -> Clone(copying) To laptop i.e project is copied inside your laptop 

            -> project is copied inside your laptop - Local Repository

            -> First Clone --> Local Repository == Remote Repository

            -> Write a program to calculate sum of 1000 employees salaries 

            -> created employees_salaries.py file -> Write logics (code)

            -> Commit Change (Saving in Local Repository)

8th Sep 2025
============

    -> Installing Python from python.org 

        -> windows - .exe
        -> macos - .pkg

        -> NOTE : Check both the options, while installing python(adds PATH variable to Env Settings)

        -> Win : Command Prompt(cmd) --> python --version 

        -> Mac : Goto Launchpad --> Search (look for Terminal) --> python3 --version

    -> Installing IDE 

        -> Visual Studio Code (VS Code) : Writing Code

        -> To execute python code moving forward --> Use Terminal from VS Code
    
    -> Installing Git 

        -> Download & Install Git 

            -> https://git-scm.com/downloads

            -> MAC OS 

                -> Install Home Brew - https://brew.sh/

                    -> /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

                -> Install Git 

                    -> brew install git

        -> Create GitHub Account 

            -> https://github.com/

        -> Clone Repository

        -> Open GitBash (Detailed Used While Creating GitHub Account)

            -> git config --global user.name github_id
            
            -> git config --global user.email github_email
        
        -> Start Writing Code & Track Code & Update in GitHub
    
9th Sep 2025
============

    -> Work With Python Code
    
        -> Script Mode (100% We use this from real time) 

            -> Using IDE (VS Code)

        -> CLI Mode (Command Line Interface Mode / Interactive ) (not often used) (Quick Checks)

            -> CLI 
                -> win : command prompt (cmd)
                -> mac : terminal 

                    -> win : python 
                    -> mac : python3 

            -> NOTE : Code written in CLI mode is for temporary purpose
    
    -> Any Programming Language has Syntax (Rules & Guidelines)

    -> Comparing a language like English with Python

        -> English has 26 alphabets (abcd....z)

        -> Python has keywords 

    -> Keyword : Predefined words, which holds special meaning to python Interpreter 

        -> List Of Keywords : https://docs.python.org/3/reference/lexical_analysis.html#keywords

        -> We have 35 keywords 

            False      await      else       import     pass
            None       break      except     in         raise
            True       class      finally    is         return
            and        continue   for        lambda     try
            as         def        from       nonlocal   while
            assert     del        global     not        with
            async      elif       if         or         yield

        -> Keywords + Syntax = Program / Application

        -> NOTE : Keywords cannot be used as identifiers

        -> English 
            -> today i take class for 8 AM to 9 AM (invalid)
            -> today i'll be taking the class from 8 AM to 9 AM (valid)

        -> Python 
            -> print(hello) (invalid)
            -> print("hello") (valid)

10th Sep 2025
=============

    -> Identifiers

        -> Within Python Identifiers are names given to 

            -> variable
            -> Function
            -> class
            -> object 
            -> method
            -> etc 
        
        -> Identifiers have rules 

            -> Can Contain

                -> Letters (a-z,A-Z)
                -> Digits (0-9)
                -> Underscore(_)

            -> Must Start With

                -> A letter or Underscore
            
            -> NOTE : keywords cannot be identifiers

-> Variables 

    -> Variables are names for Memory (RAM) locations

    -> Variables Allows you to

        -> Assign Data
        -> Retrieve Data
        -> Manipulate Data (If Required)
    
    -> Syntax:

        variable_name = value 
        student_name = "Ravi"
        = is called as assignment operator

    -> NOTE : A function in python is going to do a task

    -> id() : Is used to display the identity of an object 

    -> type() : Is used to display the type of data assigned for a variable

    -> NOTE : In python a variable can change during the execution 

    -> When you want to output string data (combing multiple variables) 

        -> We use Concatenation (Joining Multiple Strings) 

            -> Concatenation operator : + (When used with Strings)
            -> Addition operator : + (When used with Numeric Data)

            -> + (Polymorphism : Multiple Forms)

11th Sep 2025
=============

    -> Interpolation : Replacing Placeholder with actual Values dynamically

        -> We can achieve this using f-strings in python (Supports only from python3)

        -> Syntax : we use {}, with f as (formatted string literals)  

    -> Manipulate Data

-> Operators 

    -> Special Symbols, that performs operations on Variables and their values

    -> Operators Categorization

        -> Arithmetic Operators

            -> + - * / % 

            -> // - floor division (same as division but rounds off value)
            -> ** - exponentiation (calculate power)
        
        -> Compound Assignment Operators

            -> Combine Arithmetic and Assignment Operators 
            -> Use for concise code (short hand)

            -> x = 10
            -> x = x + 5 (long form)
            -> x += 5 (short hand) x is now 15
            -> x *= 5 (short hand) x is now 75
        
            -> Increment / Decrement : ++ / -- (python doesn't support this)

        -> Comparison Operators 

            -> Compare Values and Result will be a boolean (True/False)
            -> Used in conditionals 

            -> == (equality check)
            -> != (not equal)
            -> > 
            -> <
            -> >=
            -> <=
        
        -> Logical Operators

            -> Used to check multiple conditions and Result will be a boolean (True/False)

            -> and : validates if both conditions are true, then result is true
            -> or : if one of the conditions is true, then result is true
            -> not : negates if condition is true, then result is False

                X       Y       X and Y    X or Y    not X    not Y
                T       T           T         T         F       F
                T       F           F         T         F       T
                F       T           F         T         T       F
                F       F           F         F         T       T 

        -> Membership Operators

            -> Used to check if a sequence is present 

                -> in : return True, if sequence is present

                -> not in : return True, if sequence is not present

        -> Identity Operators

            -> Used to Compare (memory address)

                -> is : return True, if objects are same

                -> is not : return True, if objects are not same

        -> Bitwise Operators

            -> Used in low level programming (0101010)

            -> &(AND) - sets each bit to 1, if both bits are 1
            -> | (OR) - sets each bit to 1, if one of the bits is 1
            -> etc






4th Sep 2025
============

-> Python : 35-40 Days (Common for DA/DS/AI or FullStack or Cloud & DevOps)

    -> DA/DS/AI : pandas, numpy, matplotlib etc 
    -> FullStack : Django
    -> Cloud & DevOps : Scripting (OS,SYS,Cloud Modules etc)

-> Python : Python is a high-level, general-purpose programming language. 
            Its design philosophy emphasizes code readability 
            with the use of significant indentation. 
            Python is dynamically type-checked and garbage-collected.

-> Programming Language (Python) : Communicate with Machines

    -> Why shouldn't i Communicate with Machines using English ?

        -> Machines Use Binary Language (01110100101's) 

            -> Binary Language == Machine Language = Low Level Language

            -> 01110000 01111001 01110100 01101000 01101111 01101110 

                -> python

            -> High Level Language 

        Language (English) : Communicate with humans who wants to exchange ideas / data 
        in terms of english
    
    -> General-purpose programming languages

        -> used to manage workloads in different domains 

            -> python can be used for following 
                (bcz of Supporting Multiple Programming Paradigms )

                -> Desktop Apps
                -> Web Apps
                -> API Dev
                -> Data Related Domain
                -> Scripting 
                -> etc 

    -> Domain Specific programming languages

        -> Structured Query Language is a domain-specific language used to manage data, especially in Database Systems

    -> Programming Paradigms 

        -> Paradigm : structure / way to do things

        -> Imperative : HOW TO DO (Style) - Full stack / DevOps / Cloud

        -> Declarative : WHAT TO DO (Style) Functional - DA / DS / AI

        -> Python supports Multiple Programming Paradigms 


    -> Add Two Numbers In Java

    class Main {
        public static void main(String[] args) {          
            int first = 10;
            int second = 20;
            // add two numbers
            int sum = first + second;
            System.out.println(first + " + " + second + " = "  + sum);
        }
    }

    -> Add Two Numbers In Python
        first = 10
        second = 20
        sum = first + second
        print(sum)
    
    -> Interpreted (Slow In Performance) - Python

    -> Compiled (Fast In Performance) - Java

5th Sep 2025
============

-> Hardware Spec:

    -> i5 / i3 Processor
    -> 8 GB RAM 
    -> 500 GB HDD

-> Softwares:

    -> Setup Python (python.org)
    
    -> IDE : Integrated Development Environment (Visual Studio Code)
        -> For Writing Code
        
    -> Version Control System : Helps You Keep Track Of Code 

        -> Project : Repository (Holds Project Code + Tracking History) (Collection Of Commits)

        -> Changes : Commits 

        -> Systems We Use

            -> Git : Client Software installed in developer laptop, to start tracking code

            -> GitHub : Platform Which Enables To Store Source Code (github.com)

        -> Workflow

            -> As a developer, you'll create an account on GitHub (github.com)

            -> On Github We Create Repository (Remote Repository) - Unique URL

            -> Clone (Remote Repository) Using - Unique URL 

                -> Clone(copying) To laptop i.e project is copied inside your laptop 

            -> project is copied inside your laptop - Local Repository

            -> First Clone --> Local Repository == Remote Repository

            -> Write a program to calculate sum of 1000 employees salaries 

            -> created employees_salaries.py file -> Write logics (code)

            -> Commit Change (Saving in Local Repository)

8th Sep 2025
============

    -> Installing Python from python.org 

        -> windows - .exe
        -> macos - .pkg

        -> NOTE : Check both the options, while installing python(adds PATH variable to Env Settings)

        -> Win : Command Prompt(cmd) --> python --version 

        -> Mac : Goto Launchpad --> Search (look for Terminal) --> python3 --version

    -> Installing IDE 

        -> Visual Studio Code (VS Code) : Writing Code

        -> To execute python code moving forward --> Use Terminal from VS Code
    
    -> Installing Git 

        -> Download & Install Git 

            -> https://git-scm.com/downloads

            -> MAC OS 

                -> Install Home Brew - https://brew.sh/

                    -> /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

                -> Install Git 

                    -> brew install git

        -> Create GitHub Account 

            -> https://github.com/

        -> Clone Repository

        -> Open GitBash (Detailed Used While Creating GitHub Account)

            -> git config --global user.name github_id
            
            -> git config --global user.email github_email
        
        -> Start Writing Code & Track Code & Update in GitHub
    
9th Sep 2025
============

    -> Work With Python Code
    
        -> Script Mode (100% We use this from real time) 

            -> Using IDE (VS Code)

        -> CLI Mode (Command Line Interface Mode / Interactive ) (not often used) (Quick Checks)

            -> CLI 
                -> win : command prompt (cmd)
                -> mac : terminal 

                    -> win : python 
                    -> mac : python3 

            -> NOTE : Code written in CLI mode is for temporary purpose
    
    -> Any Programming Language has Syntax (Rules & Guidelines)

    -> Comparing a language like English with Python

        -> English has 26 alphabets (abcd....z)

        -> Python has keywords 

    -> Keyword : Predefined words, which holds special meaning to python Interpreter 

        -> List Of Keywords : https://docs.python.org/3/reference/lexical_analysis.html#keywords

        -> We have 35 keywords 

            False      await      else       import     pass
            None       break      except     in         raise
            True       class      finally    is         return
            and        continue   for        lambda     try
            as         def        from       nonlocal   while
            assert     del        global     not        with
            async      elif       if         or         yield

        -> Keywords + Syntax = Program / Application

        -> NOTE : Keywords cannot be used as identifiers

        -> English 
            -> today i take class for 8 AM to 9 AM (invalid)
            -> today i'll be taking the class from 8 AM to 9 AM (valid)

        -> Python 
            -> print(hello) (invalid)
            -> print("hello") (valid)

10th Sep 2025
=============

    -> Identifiers

        -> Within Python Identifiers are names given to 

            -> variable
            -> Function
            -> class
            -> object 
            -> method
            -> etc 
        
        -> Identifiers have rules 

            -> Can Contain

                -> Letters (a-z,A-Z)
                -> Digits (0-9)
                -> Underscore(_)

            -> Must Start With

                -> A letter or Underscore
            
            -> NOTE : keywords cannot be identifiers

-> Variables 

    -> Variables are names for Memory (RAM) locations

    -> Variables Allows you to

        -> Assign Data
        -> Retrieve Data
        -> Manipulate Data (If Required)
    
    -> Syntax:

        variable_name = value 
        student_name = "Ravi"
        = is called as assignment operator

    -> NOTE : A function in python is going to do a task

    -> id() : Is used to display the identity of an object 

    -> type() : Is used to display the type of data assigned for a variable

    -> NOTE : In python a variable can change during the execution 

    -> When you want to output string data (combing multiple variables) 

        -> We use Concatenation (Joining Multiple Strings) 

            -> Concatenation operator : + (When used with Strings)
            -> Addition operator : + (When used with Numeric Data)

            -> + (Polymorphism : Multiple Forms)

11th Sep 2025
=============

    -> Interpolation : Replacing Placeholder with actual Values dynamically

        -> We can achieve this using f-strings in python (Supports only from python3)

        -> Syntax : we use {}, with f as (formatted string literals)  

    -> Manipulate Data

-> Operators 

    -> Special Symbols, that performs operations on Variables and their values

    -> Operators Categorization

        -> Arithmetic Operators

            -> + - * / % 

            -> // - floor division (same as division but rounds off value)
            -> ** - exponentiation (calculate power)
        
        -> Compound Assignment Operators

            -> Combine Arithmetic and Assignment Operators 
            -> Use for concise code (short hand)

            -> x = 10
            -> x = x + 5 (long form)
            -> x += 5 (short hand) x is now 15
            -> x *= 5 (short hand) x is now 75
        
            -> Increment / Decrement : ++ / -- (python doesn't support this)

        -> Comparison Operators 

            -> Compare Values and Result will be a boolean (True/False)
            -> Used in conditionals 

            -> == (equality check)
            -> != (not equal)
            -> > 
            -> <
            -> >=
            -> <=
        
        -> Logical Operators

            -> Used to check multiple conditions and Result will be a boolean (True/False)

            -> and : validates if both conditions are true, then result is true
            -> or : if one of the conditions is true, then result is true
            -> not : negates if condition is true, then result is False

                X       Y       X and Y    X or Y    not X    not Y
                T       T           T         T         F       F
                T       F           F         T         F       T
                F       T           F         T         T       F
                F       F           F         F         T       T 

        -> Membership Operators

            -> Used to check if a sequence is present 

                -> in : return True, if sequence is present

                -> not in : return True, if sequence is not present

        -> Identity Operators

            -> Used to Compare (memory address)

                -> is : return True, if objects are same

                -> is not : return True, if objects are not same

        -> Bitwise Operators

            -> Used in low level programming (0101010)

            -> &(AND) - sets each bit to 1, if both bits are 1
            -> | (OR) - sets each bit to 1, if one of the bits is 1
            -> etcef emp_info(name,age,institute = "Edify"):
   print(institute)
emp_info("divya","age","jupiter")

#dictnory

details ={}
details["emp_name"] = "divya"
details["emp_email_id"] = "divya@gmail.com"
details["emp_location"]= "hyd"
print(details)
#global scope


#namga = 30
def add(la,lb):
    print(la)
    print(lb)
    print(ga)
add(20,30)e conflict
ga = 30
def add(la,lb,ga):
    print(la)
    print(lb)
    print(ga)
    print(globals()["ga"])
add(1,2,3)



##get predifined function types

import builtins
print(dir(builtins))

#without lambda

def add(a,b):
    return a + b
print(add(3,4))

#with lambda

#lambda arguements : expression


sum = lambda a,b :a+b
print(sum(10,20))

info = lambda g, h :g*h
print(info(100,55))

##IILE

print((lambda a,b :a%b)(6,9))

print((lambda a,b :a*b)(6,9))

## with lambda

print((lambda num : num +2 ==3)(3))
print((lambda num : num *3 == 3)(9))

#without lambda

def info(num):
    if num %2 == 0:
      return True
    else:
     return False
print(info(0))
print(info(2))

def info(num):
    if num +2== 3:
      return True
    else:
     return False
print(info(3))
print(info(2))

#with lambda 
print((lambda num :"positive"if num >0 else "negative")(10))

##iile
print((lambda a,b:a+b)(5,6))

#without lambda

def is_even(num):
   if num%2==0:
      return True
   else:
      return False
print(is_even(5))

#with lambda

print((lambda num:num%2==0)(5))

      
      #

def emp_info(emp_name,emp_email,emp_loc):
   employee_details = {}
   employee_details["emp_name"] = emp_name
   employee_details["emp_email"] = emp_email
   employee_details["emp_loc"] = emp_loc

   return employee_details

print(emp_info("Divya","divya@gmail.com","mydukur"))

def emp_information(emp_name,emp_email,emp_loc):
   print(f"emp_name : {emp_name},emp_loc = {emp_loc} , emp_email : {emp_email}")

emp_information("Divya","divya@gmail.com","mydukur")

def empl_info(emp_name,emp_email,emp_location,company_name="Edify"):
   print(f"hi {emp_name},your email is {emp_email} and work location is {emp_location} and ur company name is {company_name}")
   
empl_info("divya","divya@gmail.com","mydukur")
empl_info("sai","yaminio@gmail.com","mydukur")


#without lambda
def is_even(num):
   if num%2==0:
      return True
   else:
      return False
print(is_even(5))
print(is_even(10))

#
data = (1,2,3)
def display(data):
   for num in data:
      if num % 2 == 0:
        print ("even")
      else:
         print("odd")
display(data)

print((lambda num:num%2==0)(5))

#
emp_info =((lambda emp_name,emp_email,emp_location:print(f"hi {emp_name}, ur email is {emp_email} and ur location is {emp_location}"))("divya","divya@gmail.com","hyd"))
emp_info

#regular functions

def greet (name):
   print("hello",name)
   print("welcome to python")
greet("divya")

#normal
def add_num(*numbers):
    total=0
    for num in numbers:
      total+=num
    return total 
print(add_num(1,2,3))

##without map
def square_list(numbers):
   square_list = []
   for num in numbers:
      square_list.append(num*num)
      return square_list
print(square_list([1,2,3,4,5]))
#with map()
print(list(map(lambda num:num*num,[1,2,3,4,5])))

##
print(map(lambda num:num*num,[1,2,3,4,5]))

##without filter()
def even_list(numbers):
   even_numbers = []
   for num in numbers:
      if num % 2 == 0:
         even_numbers.append(num)
   return even_numbers

print(even_list([1,2,3,4]))

